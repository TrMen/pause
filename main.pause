struct state {
    num: u64 = 0,
    stored: u64 = 0,
    s: some_struct = {},
    others: [u64] = [1],
    others_copy: [u64] = [],

    variant_field: Optional = Optional::some(2),
    other_variant_field: Optional = Optional::none,
}

struct some_struct {
    num: u64 = 0,
    nested_variant_field: Optional = Optional::none,
}

procedure increment {
    // Leading . is for state access
    // This isn't really needed, since functions can't access state anyway
    // but this makes it visually clear
    .num +=1;
}

assertion increment_good {
    current:.num == current:.stored + 1
}

assertion ambitious {
    (current:.s.num + 1) == (past:.s.num + 1 + 1)
}

//procedure fallible {
//    error "Unlucky"
//}

// Procdures take and return nothing. 
// They take their state from the 'state' field and assign to it.
procedure store {
    .stored = .num;
}

// Functions cannot access state, and only take and return values
// They cannot change any state in any way
// Functions are just expressions, so any other construct can call them
function plus_one (i: u64) -> u64 {
    i + 1
}

function add(lhs: u64, rhs: u64) -> u64 {
    lhs + rhs
}

function access(arr: [[u64]], index: u64) -> u64 {
    arr[index][2]
}

enum Optional {
    some: u64,
    none: void,
}

procedure main {
    .num = 2;

    .num = 3;
    .num = 4;
    .num = 5;
    .num = 6;
    .num = 7;
    .num = 4 + 4;
    .num = .num + 1;
    ..store;
    ..increment;
    !increment_good;
    .num = plus_one(plus_one(8));
    .stored = add(14, 100);

    .others = [2,3,4];

    .stored = access([[1,2,9001,3]], 2);

    .others[2] = 1000000;

    .others = [];

    .s.num = 2;

    for .others {
        // O(len(.others))
        .others_copy[idx] = it;
    }

    .variant_field = Optional::some;

    .s.nested_variant_field = Optional::some(1);
}
