program = top_level_decl...
top_level_decl = struct | prodedure | assertion

struct = 'struct' 'identifier' '{' vardecl... '}'
vardecl = identifer ':' type '=' initializer ','
initializer = value | '{''}'

procedure = 'procedure' identifier '{' procedure_body '}'
assertion = 'assertion' identifier '{' expression '}'

procedure_body = statement...
statement = assertion_statement | expression ';' | identifier_access assign_op expression ';'
procedure_call = identifier '(' ')'
assertion_statement = '!' identifier ! ';' 

expression = simple_expression | simple_expression binary_operator expression
simple_expression = procedure_call | value | identifier_access | state_access

state_access = state_designator ':' indentifier_access

identifier_access = identifier | identifier '.' identifier_access
state_designator = 'current' | 'past'

assign_op = '+=' | '='
identifier = [a-zA-Z_]
binary_operator = '==' | '+'
type = 'u64' | 'string'
value = '1'.. | string | 'true' | 'false'
string = '"'char...'"'


Additional rules:
- Must have a procedure called 'main' and a struct called 'state'
 - Structs must init all members. Other structs can be initialized to whatever they say with "= {}" TODO: Or members can be specified
- Cannot do state_access within procedures. Only assertions



TODO:
- '!' assertion_predicate for simple inline assertions
- Allow expressions as initializers for struct field 
- Make struct literals values and allow them in expressions
