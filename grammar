program = top_level_decl...
top_level_decl = struct | prodedure | assertion | function

struct = 'struct' 'identifier' '{' field_decl... '}'
field_decl = identifer ':' type_name '=' expression ','

procedure = 'procedure' identifier '{' procedure_body '}'
assertion = 'assertion' identifier '{' expression '}'
function = 'function' identifier '(' params ')' '->' type_name '{' expression '}'

params = identifier ':' type_name [','] | identifier ':' type_name ',' params
procedure_body = statement...

statement = procedure_call | assertion_statement | state_assignment | expression ';'
state_assignment = '.' access_expression assign_op expression ';'
procedure_call_ = '..' identifier ';'
assertion_statement = '!' identifier ';' 

expression = access_expression | access_expression binary_operator expression 

access_expression = simple_expression
                    | simple_expression '.' access_expression
                    | simple_expression '[' expression ']'
                    | simple_expression '[' expression ']' access_expression
                    | identifier

simple_expression = function_call | value | state_access | binding_access | execution_access

execution_access = execution_designator ':' state_access
state_access = '.' access_expression
binding_access = identifier

function_call = identifier '(' arguments ')'
arguments = expression [','] | expression ',' arguments

expression_list = expression [','] | expression ',' expression_list

execution_designator = 'current' | 'past'
assign_op = '+=' | '='
identifier = [a-zA-Z_]
binary_operator = '==' | '+'
value = '1'.. | string | 'true' | 'false' | array
array = '[' expression_list ']'
string = '"'char...'"'
type_name = buildin_type | identifier | '[' ']'
buildin_type = 'u64' | 'string'


Additional rules:
- Must have a procedure called 'main' and a struct called 'state'
 - Structs must init all members. Other structs can be initialized to whatever they say with "= {}" TODO: Or members can be specified
- Cannot do execution_designator within procedures. Only assertions
- Expressions always yield a value (that's why any expression is fine in an assertion)
- The expressions in functions cannot access state. Only in procedures (and there also assign), and assertions (read-only there)
- SimpleExpression on lhs of assigment must refer to state
- Struct field init expression must use globally-defined things


TODO:
- '!' assertion_predicate for simple inline assertions
- Allow expressions as initializers for struct field 
- Make struct literals values and allow them in expressions
- Allow more than just literal values in arrays
- Functions as values

